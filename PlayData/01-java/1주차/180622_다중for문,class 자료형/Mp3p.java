//질문 있음. 컵을 쓰고 설거지를 안하고 돌려주니까 다시 컵을 쓰려면 설거지(초기화)를 해야되는건가?
//**********시험 문제 있음**********
/*
클래스명		Mp3p
속성			color			색상을 기억
			memory			메모리 용량을 기억
동작			setMemory()		memory 용량을 설정한다.
			setColor()		color 값을 설정한다.
			getMemory()		memory 값을 가져온다.
			getColor()		color 값을 가져온다.

*/


class Mp3p {	//설계도		Mp3p 라는 새로운 자료형(명사) 설계			//이게 진짜 기술적 설계도는 못만들지, 있다고 치고/ 같은 기종이라도 소비자가 선택을 할 수 있어, 색깔을 고를 수 있어, 그런 선택사항은 따로 저장을 할 수 있어, 차를 주세요, 빨간 차를 주세요/ 이러면 차를 만들어서(옵션을) 고객한테 주는거야/ 그걸 저장할 컬러란 변수 하나(메모리를 할당)
	//************시험 나올거임 시험************ // 대신 데이터를 넣어주는 메서드를 세터/ set앞에 붙이고 뒤에 이름 / 대신 가져오는애 앞에다 get멤버이름 이런식으로.
	// 멤버변수 - 속성
	private String color;		//멤버변수는 초기화 안해도 되
	private int memory;

	// 멤버메서드 - 동작 / 행위 
	public void setColor( String c ){	//->색깔을 대신 넣어주는거/ 근데 안 이상함 니가 대신 넣어줘 그럼 이상ㅎ지/ 뭘 넣어줘? 넣어줄게 뭔데? 이 셋터들한테는 이 값을 넣어줘 라고 되어있어 그게 동그라미 괄호에서 받아. 겟터도 동그라미
		color = c;
	}
	public void setMemory( int m ){
		memory = m;
	}

	public String getColor(){
		return color;
	}
	public int getMemory(){
		return memory;
	}
	
	public static void main( String[] args ){
		/* 객체 생성		int a 라고 하는 것처럼 앞에는 자료형 뒤는 이름 자료형 이름 <= Mp3p m3;
						C랑 자바랑 비슷한데 완전히 다르니까 잘 봐야됨
						Mp3p m3; 메모리 할당을 받느냐 안받느냐 클래스로 메모리 할당을 받느냐 안 받느냐
						C에서는 객체임
						엄밀히 말해서 씨에선 이건 포인터.

						왜 자바에서는 이게 객체가 아니냐
						사전 설명 좀 합시다 알아두세여 그냥
						
						코드				<= 이건 지금 시녁ㅇ쓰지 말곳
						static			<=여기다 넣을거면 특별한 예약어 / 프로그램 끝날 때 까지 메모리를 반납을 안해
						heap			<= 지금부터 추가로 할당할 영역/ 이걸 구분 할 줄 알아야되/ 여기다 넣을라면 특별한 예약어ㅓ를 넣어서 명시를 해야되/ 수동으로 반납이 가능해 /new 라는 걸로 할당받으면 반납할 때는 delete(가 없어)

						stack			<= int a; 여기에 할당 / 얘는 자동 반납이 됩미다 / 그래서 여태까지 반납을 다 안했어

						이거 Mp3p 라는 프로그램 만든거야 이거 실행하면 이거 자바프로그램 돌아요 뭐 중요한건 아니고
						운영체제가 얘한테도 보통 2기가라고 하는데 메모리 할당을 할거란 말야 프로그램에서 자기한테 할당된 메모리를 아껴서 사용해야되 물론 2기가는 충분함
						이 메모리를 그냥 통짜로 쓰는게 아니야
						int a라고 메모리 할당 받아라 그럼 아무대나 막 받는게 아니야
						운영체제한테 할당받은 메모리를 이렇게 4등분 해서 사용해
					
				public static <- static 영역에 저장할래!
				
				heap 이랑 stack 은?????
				이거는 메모리 관리 때문에 그래
				씨도 자바도 모든 언어 다 똑같아. 어떻게 메모리를 관리하녀면
				메모리 할당 받는게 중요한게 아니야, 메모리를 반납하는게 중요해
				더이상 안쓸거야 그러면 다른애가 가져다가 쓸 수 있게 해줘야데
				씨에서는 자기가 필요없으면 자기가 써서 반납하면되
				자바는 신경 안쓰지

				자바는 알아서 관리해줘 stack? 그렇다고 해서 자바는 여기잡고 씨는 딴대 잡냐 그건 아냐
				씨는 자기가 메모리 관리를 해야되는 씨도 stack에 저장하면 자동으로 반납되
	main(){	
		int a;
		}	암말도 안했지 그럼 stack 에 잡혀. 씨에는 오터변수 뭘라/ 이 변수는 자기가 속한 영역이 끝나면 사라진다.
			stack 이란 메모리는 쓰다가 반납하고 싶어도 반납을 못해 끝날 때 반납하니까

	근데 heap 영역에 저장을 하면 내가 반납을 하고 싶을 때 / 반납을 하는거야

	클래스를 가지고 메모리 할당 받는 객체는 멤버 객체, 멤버 메서드, 클래스 딱만들었다고 끝나는게 아니라 안보이는 뭔가가 잔뜩 들어있는 그것 까지 클래스로 받으면 무지 커 
	그래서 자바도 이건 관리를 해줘야되
	그래서 클래스로
	메ㅔ모리 할당 받을 때는
	heap에다 저장을 해줘야 된다는 거야


	변수 앞에 아무것도 안붙이면 stack에 붙인댔지 근데 new를 붙이면 heap 에 메모리를 할당 받아
	언제 반납, 어떻게 반납하지? 직접 하고싶은데
	이 중간중간 직접 반납을 시켜주면 다른애가 쓰고 돌려쓰면 아껴쓸 수 있잖아
	new 라는 걸로 받으면 반납할 때는 delete 로 하면 된다.
	근데 자바에는 delete라는 게 없어...

		여기서 씨와 자바의 차이
		씨에서는 new 하면 delete 예약어 계속 해줘야되
		자바는 new 하면 JVM 이 돌아다니다가 안쓰네? 하면 집어가
			그래서 C는 수동, 자바는 자동
		문제는 JVM 이 언제 집어간다는 건지 모르잖아. 프로그램 중간에 가져간다는건데
		자바에서 자동으로 처리하니까 메모리를 신경은 안써도 되는데 최소한 우리는 heap 영역에 올려놔야되 new로 최소한 그정돈 해줘야지 / 다 날로먹을 순 없잖아
		그래서 자바에선 좀 큰 메모리는 다 heap에다가 올린다.
		그래서 객체를 할당 받을 때는 new 정도는 꼭 해줘야 하는것.
					씨는 저장장소를 선택할 수 있어 알아서 어차피 넣는놈들이 반납도 해야하니까
					근데 자바는 안됩니다. 자바는 stack 에다가 객체를 저장을 못합니다. JVM 한테 반납 다 맡기셨잖아요
					stack에 넣으면 가상머신이 접근해서 가져갈 수 있는게 아니니까
					선택사항이 아니라 필수로 new 를 해줘서 JVM(자바가상머신)이 관리할 수 있게 해준다

					이게 배열에도 해당이 되.
					방이 많잖아 이것도 관리를 해야되 / 자바 가상머신이 집어갈 수 있게 
					해서 자바에서는 배열도 객체야

		*/
		//Mp3p m3; => 이게 씨에서는 stack에 객체생성(메모리 할당)하라는 소린데, JAVA는 stack에 저장을 하면 안되, 할 수도 없고 필수로 heap 영역에 넣어야되
		//	그럼 이렇게 적으면 무슨 뜻이 되느냐/ 힙에 color랑  memory 무 ㅓ등등 잡았어여 m3라고 / 
		// 이름을 a 라고 잡았다 칩시다. 다썼어 반납했어/ 이름을 b라고 반납해써 써야 되잖아/ 
		// 전체 메모리를 한 번 할당 받은 다음에 여기에 a라고 붙였져. 그리고 반납하고 다시 b라고 붙여줘 그렇게 하면 되냐// 
		// 한번 붙인 이름은 끝이야. 이름은 뗐다 붙였다가 안되. 첨에 a야 그럼 프로그램 다 끝날 때까지 그건 a야/ 
		// 무슨 문제가 되냐면 다 쓸데없는 고민이 된거야. 우리가 힙에 넣는 이유가 가상버신에 올려서 JVM이 가져갈 수 있게 하려는 거잖아 
		// 근데 한번 이름을 붙이면 탈부착이 안된데 그럼 힙 영영이 뭐가 필요있어
		// 우리는 이거 해야되 그래서 해결책을 찾은게/
		//힙영역에는 이름을 못붙여/ 메모리를 어떻게 접근할꺼야?????? 꺼내고 집어넣을 때?? / int a = 5; 이러면 a라는 공간에 접근해서 안에 있는걸 꺼내와라
		// heap에 이름없지. 어떻게 접근해. //프로그램에 진짜 메모리 주진않아. 가상 메모리를 쓰지. 
		//C에서 관리하는 것도 가상메모리. 가상메모리로 운영체제가 할당을 해줬어. 이건 그냥 할당해주는게 아니라 1바이트 단위로 쪼개서 주소를 다 할당해줘
		//자바는몰라도되ㅣ/ 그 주소가 4바이트여서 포인터가 4바이트임/ 101 | 102 | 103 | 104 ...109 | 10a / 
		//이런 길다란 순서대로 되있는 막대기. /int a=5; 이렇게 운영체제한테 시켰어. 그러면 운영체제는 나름대로 전략적으로 배치해. 
		// 메모리 배치 전략 / 중간에 쓰고있는 메모리가 있어, 4바이틀 줘야되니까 4칸만큼 넣어줘. 그럼 104~107만큼 넣었으면 그 시작주소104 로 접근 할 수 있다.
		// heap 은? 이름이 없으니까. /시작주소/ 이걸로 찾아간다. 우리는 뭐라그러냐면 참조값(100)/ C에서 얘기하는 포인터 
		// 근데 아직도 문제가 남았어. 저 포인터가 01010101이런걸로 2진수 32자리야. 저걸 외울수가 있느냐/ 외워서 쓸꺼야 이걸???
		// 포인터를 직접 쓰는 C도 2진수를 안건드려 / 이거를 변수에 담아서 쓴다.
		// 그래서 stack 에 변수를 하나 만들어. stack 에 주소를 담아 이걸 통해서 heap 을 찾아가는거야 
		// heap 영역에 변수를 잡을 때는 항상 stack 영역에 (의식하지 못하는) 메모리를 할당 받아야되 
		// C에서는 이 stack 영역에 있는 메모리를 '포인터 변수' 라고 해. 포인터 변수에는 무조건 주소만 넣을 수 있어. 일반 숫자 못넣어
		// 우리는 참조 변수/ heap 의 참조값(포인터)을 찾아가는 참조변수(포인터 변수)
		// C는 Mp3p m3; 이렇게 스택에 저장해도 객체가 만들어지고 포인터 변수를 이용해서 만들어도 괜ㅊ낳아
		// 근데 이게 객체 ㄱ객체 하게 되면 헷갈리게 되니까 
		// heap 영역을 우리는 인스턴스 라고 부른다.
		
		Mp3p m3;			//참조 변수 heap영역에 할당받은 공간의 참조값을("시작주소") (stack)저장		
							//시작주소 밖에 모른다는게 맹점이야/ '시작' 주소까지 왔어/그 다음에 뭐가 어딨는지 어뜨케 접근해 어딨는지 알고 
							// 그래서 쓰는 것이 . / m3.color 이렇게 / 그냥 m3.color 해도 에러가 안나/ 
							//사실 이건 좀 이상한데도 말이야 시작 주소를 찾아 갔으니까
		m3 = new Mp3p();	//인스턴스 heap영역에 할당받은 데이터 저장 공간	//new도 연산자 래. 재밌다.

		m3.setColor("빨간색");	//. 이라는 것은 뭐다? "뭐뭐 속에"
		m3.setMemory( 64 );
		System.out.println( "색상 : " + m3.getColor() );
		System.out.println( "용량 : " + m3.getMemory() );

	System.out.println();
		Mp3p m4 = new Mp3p();

		m4.setColor("보라색");	//. 이라는 것은 뭐다? "뭐뭐 속에"
		m4.setMemory( 256 );
		System.out.println( "색상 : " + m4.getColor() );
		System.out.println( "용량 : " + m4.getMemory() );	

	}
}

/*
왜 이름을 뺐느냐(식별자)
이름을 쓰고 똥그라미 괄호 있으면 무조건 메서드야
그래서 main을 
main 메서드라고 그래

우리가 클래스 안에 메인을 넣지


main 없어도 컴파일 되

모든 클래스가 main을 갖고 있어야 되는것도 아냐

어떻게 구별하느냐
이클래스는 실행하는 클래스야 그건 메인을 넣으세요
이클래스는 부품용이야 저장해놓고 나중에 쓸 꺼야 그건 도리어 메인을 넣으면 안되
부품도 실행도 둘 다 메인 있으면 충돌할 꺼아냐 누가 메인이야

또 하나 여태까지는 메인 안에 코딩을 다 했어
메인이 시작점이니까

여기 속성 동작 있지
속성이 멤버 변수
동작이 멤버 메서드
지금부터 하는건

메인 안에 넣으시면 안됩니다. 메인이랑 동급이에요 메인 밖에 코딩해야 됩니다.
멤버 변수 멤버 메서드 는 main이랑 동급

근데 메인 밖엥 ㅣㅆ으면 실행이 안되
메인 밖에 실행 하는 애가 없어
그래서 실행을 할 애Exam 에다가 메인을 배치하고 호출 해다가 다 갖 다 쓰 는 것

우리가 만드는 것도 만들어놓고 메인에서 호출안하면되

그럼 코딩 왜해->요건 더 생각해 봐야지 되는 부분


앞으로 메인 안에 아무것도 안할거냐 
그건 아냐 메인 안에서도 코딩을 할겁미다


자 이제 메인 밖에서도 가져다 써야되 변수를 내 눈에 보고 있는데 변수가 없어,(변수의 위치 지역변수 전역변수)
이런 일이 벌어져

우리가 변수를 배웠는데
메서드를 안배웠어
메서드는 그냥 대신 해주는 애다 생각하고 짜주는 대로 짜면됩미다.
*/