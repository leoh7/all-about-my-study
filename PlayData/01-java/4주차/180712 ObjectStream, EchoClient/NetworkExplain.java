/*
	네트워크		다른 장치로 데이터를 이동시킬 수 있는 "컴퓨터들"과 "주변 장치들"의 집합
	노드			네트워크에 연결된 모든 장치
	호스트		다른 노드에게 하나 이상의 서비스를 해주는 노드
	

	혼자 벽보고 대화 -> 다수가 벽보고 대화 -> 다수가 마주보고 대화
	
	정확하게 몇개 까지가 네트워크다 라고 구분하지 ㅇ낳고 나라 하나, 마을 하나 등등 크게크게 잡는다
	노드는 말단, 이런 뜻이기도 함. 자료구조에서도 많이 쓰이는데, 네트워크에서의 노드는 장치.
	호스트는 노드 중에서 서비스를 해주는 노드, 나중에 OS가 늘어나면 호스트OS, 게스트 OS 로 구분하기도 함

	웹 브라우저-> IE, Crome, Edge, Safari,
	웹 브라우저 라는 곳에 특정 사이트를 보겠다 -> 필요한 것들(이미지, 프로그램, 데이터, 글 등)이 내 컴퓨터에 있는게 뜨는게 아니야
	이건 어딘가에서 받아온다는 얘기 / 어딘가가 daum.net 이란 사이트를 가지고 있고 이걸 받아와서 출력하는 것.
	daum.net-> 도메인이라고 부른다. -> 여기엔 IP 주소가 있음. daum.net 이라는 사이트를 가지고 있는 컴퓨터의 주소
	웹 브라우져가 daum.net(도메인)이 가지고 있는 주소를 따라가서 저장된 컴퓨터에게 파일을 내 놓으라고 요청을 함.
	도메인 주소의 컴퓨터(서버)가 웹 브라우저에게 주고, 그걸 받아서 HTML 이라는 언어의 형태로 주는 것.
	HTML 은 컴파일 해서 주는 것이 아니라 소스코드를 전부 통째로 준다. -> 그걸 해석을 해서 뿌려주는 것.

	웹 브라우저가 daum.net 을 주세요 라고 요청 = request / request 하는 애를 Client
								    응답 = response / response 하는 애를 Server

					웹 프로그램은 request와 response를 처리하는 거야. 가 끝이다.


	OSI 7 게층 (중요하지만 우리는 TCP/IP 만 쓸 거임)
	자바에서 얘기하는 네트워크 프로그래밍은 TCP/IP 모델을 사용하고 있다.
		1. 인터넷 주소(IP주소)
			유일한 32비트 숫자의 주소체계를 이용하여 서로를 구분
			8 비트씩 끊어서 표현하고, 각 자리는 1바이트로 0~255 까지의 범위를 갖는다.
			IPv4		32비트의 주소 체계.
			IPv6		오늘날 IPv4는 포화 상태이고, 이를 극복하고자 나온 버전
						IPv6는 128비트의 주소 체계를 관리, 16비트씩 8부분으로 나누어 16진수

			ex)DNS 서버	받기 (Domain Name Server)
				126.168.63.1	KT꺼
				1.1.1.1
			
			IP주소는 전세계 IP주소를 관리하는 협회가 있다. 거기다가 돈을 주고 IP를 몇개 주세요 해서 몇개를 할당을 해줌.
			그럼 그 IP를 쓰면 됨 / 비쌈

			192.168 로 시작하는 주소는 맘대로 써도 되는 대역
				이걸 내부 IP라고 함. 이 IP는 우리끼리는 쓸 수 있지만 외부에서 들어오는건 안되.
				이걸로 만들어 놓으면 우리끼린 네트워킹이 가능함(내부IP 대역 끼리는 가능)
			빌려온 IP = 공인IP, PC방은 다 공인 쓰게 되어있음.
				이걸로 서버를 구축하면 다른 사람이 들어올 수 있음

			서버는 서버를 제공하는 운영체제 필요
			공인 IP에 고정 IP 필요(Not 유동)	// like PC방
			거기에 도메인도 필요
				DHCP 서버 
					IP 쓰나안쓰나 자꾸 물어보다가 안 쓰면 뺏어다가 다른 사람 줌
					그래서 IP가 고정되지 않고 유동적임

		컴퓨터 1대에다가 컴퓨터가 여러대 있는 것 처럼 세팅을 해서 쓸거임.

		최종적으로 1인 4역, 1인 5역의 역할을 하게 될 것.


		2. 포트와 프로토콜
		물리적인 포트		컴퓨터의 주변장치를 접속
		논리적인 포트		프로그램에서 사용되는 접속 장소

		포트는 2Byte로 0~65535
					 0~1023 까지는 이미 정의되어 있는 포트라 쓰면 안됨.
		방화벽 -> 해킹 : IP를 알아내서 검색을 한 후 열려있는 port를 찾아서 뚫고 들어가는 것.
				방화벽은 이 port들을 닫아버린다.
				다 닫혀있으면 모든 네트워크가 다 안 됨.
				보안을 강화시킨 후 port를 열어놓음

		서버 프로그램을 짠 다음에 서버를 실행하면,
		서버 프로그램 내에서 네트워크를 이용하기 위해서 3000번 포트를 열거라고 할 거란 말야?
		그러면 방화벽에서 경고창이 떠. 엑세스 허용해야지 채팅이 됨.


		서버는 서버용 운영체제가 있어야 한다.
		윈도우는 MT계열(2003, 2005 이런애들)
		유닉스 계열 / 	sun 에서 만든 솔라리스 운영체제 -> 유닉스에서 제일 많이 쓴다.
		리눅스 계열 / 유닉스의 하위 호환버전(무료!)

		서버는 우리랑 운영체제가 완전히 다르다.
		미국사람한테 "데이터 좀 주세요" 라고 한국말로 하는 것과 같은 이치

		우리만 그런게 아니라 네트워크 상에서는( 서로 다른 장비들 끼리 ) 다 그래
		서로 네트워크 상에서 얘기 할 때는 이 언어를 쓰자! 하는 그 언어가 프로토콜

		프로토콜			클라이언트와 서버간의 통신 규약
						통신규약이란 상호 간의 접속이나 절단방식, 통신방식, 주고받을 데이터의 형태?,
						오류검출 방식, 코드변환방식, 전송속도 등



		3. TCP와 UDP
		TCP / IP 계층 모델은 4계층의 구조를 가지고 있다.
		애플리케이션, 전송, 네트워크, 데이터 링크 계층이 있다.

		전송계층에서 사용하는 프로토콜에는 TCP와 UDP가 있다.
		TCP는 전화 같은 거. 내가 데이터를 보내면 바로 응답을 해줌 / 갔는지 확인이 됨 / 짜기 어려움
		UDP는 편지 같은 거. 보내기만 할 수 있고 갔는지 확인은 안 됨.				/ 짜기 쉬움

		UDP는 다운로드 같은거 받을 때, 이럴 땐 그냥 보내기만 하면 되니까 그럴 때 씀

		TCP 소켓 -> TCP 프로토콜을 이용한 장치
			클라이언트 가 TCP 소켓에다가 Data를 쓰는 것.
			그걸 서버가 읽어감

			반대로 서버가 TCP 소켓에다가 Data를 씀
			그걸 클라이언트가 읽어감

		클라이언트						서버
		3.소켓 생성					1.서버 소켓 생성
									2.서버 소켓으로 청취
		4.소켓을 이용하여 스트림 생성		4.소켓을 이용하여 스트림 생성
		5.메세지 전송					6.메세지 읽음
		6.메세지 읽음					7.메세지전송
		8.메세지 읽음
		9.소켓 종료					9.소켓 종료



		유니 캐스팅과 멀티 캐스팅
			유니 캐스팅		클라이언트와 서버간의 지속적으로 일대일로 통신
			멀티 캐스팅		일대다의 통신
		

		





*/		

