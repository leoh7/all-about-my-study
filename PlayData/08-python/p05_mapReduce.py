### map, reduce
## filter
# def even(a) :
# 	return a%2 == 0
# lst = range(10)
# print(list(filter(even, lst)))

# print(list(filter(lambda a : a%2==1, range(10))))

## map
# b = list(range(10))
# print(list(map(lambda a : a*2, [1,2,3,4,5])))
# print(list(map(lambda a : a, "ABCDEF")))
msg = """나는 프로그래밍을 독학했다. 그리고 그 때문에 끊임없이 가면 증후군에 시달렸다. 나는 자주 내가 부족하다고 느꼈고, 복잡한 컴퓨터 공학 지식을 이해하기에 불리한 위치에 있다고 생각하고는 한다.
나는 수학을 항상 못했다. 나는 언제나 탄탄한 수학 실력이 곧 프로그래밍 실력과 직결된다고 생각해 왔고, 그렇기 때문에 다른 (수학적 능력을 타고난) 사람들보다 더 열심히 해야 같은 개념을 이해할 수 있다고 믿었다. 이러한 생각들은 내 머릿 속 깊숙히 뿌리박혀 있었고, 그래서 나는 내심 내가 절대로 이진트리 순회(traversing binary search)를 배운다거나, 머지 소트(Mergesort)같은 악몽같은 재귀 패턴은 소화할 수 없을 거라고 느꼈다.
하지만 약간의 노력으로, 내 스스로 놀랄만한 성과를 이루어냈다. 그래서 어떻게 그렇게 했는지, 그리고 실제로 어떤 결과를 이루어 냈는지 공유하고자 한다. 언제나 그렇듯이, 어디선가 컨트리뷰터(contributor)들이 나타날 지도 모르는 것이기 때문에.
알고리즘과 자료구조를 연습하고 배워볼 수 있는 간단한 브라우저 자바스크립트 샌드박스, CS-Playground-React를 소개한다.
가입이 필요 없는 이 인터뷰 준비 앱은, 진행 상황을 자동으로 저장해주고, 막혔을 때는 답을 제공하고, 여러분이 내가 겪었던것 고통을 덜 겪으면서 여행할 수 있도록 다양한 링크(문서, 튜토리얼 등)을 제공한다!
이 앱이 그렇게 혁신적인 것은 아니라는 것을 인정한다. (분명 그렇게 생각하고 있었겠지!) 이런 비슷한 내용들을 브라우저에서 바로 코드를 작성하고 실행시키는 식으로 학습시키는 앱이 많다는 것은 나도 잘 알고 있다.
하지만 CS Playground React는 최대한 간단한 디자인으로, 매우 구체적인 주제에 대해서 파고든다. 또 하나는, 이 앱은 혁신적인 무언가를 위해서 만들어진게 아니다. 이 앱은 내가 이러한 내용들을 즐겁게 학습하기 위해서 택한 하나의 방식이다. 그 도중에 다른 누군가에게 귀중한 자료가 될 수 있다면, 더욱 기쁜 일이다.
이 앱은 아직 작업 중으로, 다루는 내용이나 기능 면에 있어서 아직 다양한 가능성이 열려있다. 그러니 만약 내가 아직 포함하지 않은 멋진 챌린지나 자료구조 같은 것이 있다면, 혹은 더 개선할 만한 부분이 있다고 생각한다면, 서슴치 말고 이슈를 오픈하거나 pull request를 보내줬으면 한다.😊
앱을 직접 확인해보고 싶다면, 지금 당장 여기에서 라이브로 확인해 볼 수 있다(오프라인 캐싱을 위해 서비스 워커를 등록해서 https로도 접속 가능하다)
코드가 궁금하다면, 바로 여기서 확인할 수 있다.
여기서부터는 그냥 좀 지루한 ‘왜’ 와 ‘어떻게’에 대한 이야기이다 :-)
왜 만들었는가
이 앱을 만든 동기는 간단했다: 배우고 싶었고, 그 과정을 좀 더 쉽고 재밌게 만들고 싶었다. 그보다 더 중요한 것은 내가 왜 이 지식들을 습득하고 싶었는가에 대한 이야기일 것이다.
지난 18개월 정도의 시간을 통해, 나는 내가 코딩을 할 수 있다고 자신있게 말할 수 있게 되었다. 하지만 내 자신을 프로그래머라고 부르기에는 머뭇거려지는 부분이 있었다. 내가 코딩을 생업으로 삼고 있지 않아서(실제로 내 직업이 아니다)가 아니라 앞서 말한 가면 증후군 현상 때문이었다. 무언가 만드는 것은 할 수 있다. 하지만 꽤 최근까지도 나는 제대로 된 컴퓨터 공학 지식을 거의 갖추지 못했었다.
컴퓨터 공학 기본 개념들을 배움으로써 나는 내가 조금 더 자신있게 내 자신을 프로그래머라고 느끼는 것은 물론, 다른 사람들도 나를 그렇게 볼 수 있도록 하고자 했다.
최근 IT 업계는 꽤 쉽게 독학으로 공부한 프로그래머들을 받아들이고 있다. 코딩 부트캠프가 여기저기서 생겨나고 있는 실리콘 밸리에서는 더욱 그러하다.
그럼에도 불구하고, 정식으로 컴공 교육을 받지 않은 프로그래머들은 업계에 들어가기 위해 꽤 큰 허들을 넘어야 한다.
이과 대신 문과를 나와서 입은 타격을 조금이라도 줄이기 위해서, 나는 컴공과 대학생 1~2학년들이 배울 만한 개념 몇 가지를 학습하기로 했다. 나는 이것이 내 실용적인 개발 실력을 뒷받침 해주고, 다른 이들이 나를 프로그래머로서 진지하게 받아들이도록 하는데에 도움이 될 것이라고 생각했다.
나는 프로그래밍 인터뷰에 자주 등장하는 주제들을 기준으로 범위를 정했다.
버블 정렬, 선택 정렬, 삽입 정렬, 병합 정렬, 퀵 정렬, 힙 정렬, 스택, 큐, 연결 리스트, 해시 테이블, 이진 탐색 트리.
휴우…
이렇게 나열된 문제들은 나를 상당히 압도했고, 그래서 제대로 도전하는 것을 꽤 오랫동안 미뤄두게 되었다.
하지만 그렇게 패배를 인정할 수는 없었기에 나는 곧 작업을 시작했다. 튜토리얼들을 찾아보고, 모든 문서들을 읽어보며, 수 없이 혼란을 겪으며 매일매일을 보냈다.
시간이 지나자 몇몇 개념들이 자리를 잡기 시작했다. 하지만 몇 가지 문제가 있었다.
지루해지기 시작했다. 문제를 해결하는 것은 즐거운 일이지만, 이진 탐색 트리의 reverseLevelOrder 같은 것을 푸는것은 실제 앱 개발 중에 마주하는 문제와는 비교도 안 될 정도로 재미가 없다.
너무나 오랜 시간이 걸렸다. 하루 종일 (코드를 한줄도 쓰지 않는) 업무를 보기 때문에, 코딩을 할 수 있는 시간은 매우 귀중했다. 내가 여기에 몇 개월을 쏟다보면, 실제로 실무에서 쓰기 좋은 기술들이 녹슬까봐 걱정이 되었다.
컴공 지식을 갖추는건 좋은 일이지만, 현실을 직시해보면, 웹 개발자들은 대부분 무언가를 만들기 위해 고용된다. 이런 지식들을 실제로 웹 개발을 하면서 활용할 기회는 거의 없다시피 한 것이다.
나에게는 이러한 개념들을 배우는 것이 일종의 자존심 문제였고, 포기할 마음이 없었다. 하지만 나의 제일 중요한 목표는 역시 실질적인 웹 개발 기술이었다.
그래서 나는 두가지를 하나로 합치기로 결정했다. 나의 목표를 이루면서 동시에 내 핵심 기술들을 연습할 수 있도록 해주는 간단한 앱을 만드는 것.
내가 생각하기에 무언가를 배우는 가장 좋은 방법은 (그것이 무미건조한 것일수록) 스스로가 좋아하는 것과 연결시키는 것이다. 그렇게 해서 즐겁게 앱을 만드는 것과 동시에, 컨텐츠도 개발하게 되었다.
이 프로젝트에 있어서 알고리즘과 자료구조는 필수적인 요소였다. 당연한 것이, 인터뷰 준비 앱을 만드는데 문제를 채워넣지 않으면 의미가 없으니까!
나는 며칠에 걸쳐 새로운 알고리즘이나 자료구조를 배운 후, 거의 다 이해했다 싶으면 학습 자료들을 취합해서 앱에 추가하였다. 이제 나는 내가 직접 만든 간단한 작업 공간에서 몇번이고 그 내용을 연습할 수 있다. 엄청나지 않은가?!
"""

# reduce
from functools import reducce
maplst = list( map( lambda a : (a, 1), msg.split(' ')))
reduccelst = list( reduce(lambda a, b : (a+b), maplst))
for i in reducelst :
	print(i)